class Game:
    def __init__(self):
        self.population = []  # List of individuals with their stats
        self.resources = {"food": 100, "wood": 50, "paper": 20}
        self.location = "home"
        self.actions_remaining = 3

    def perform_rest(self):
        """Restores minor health or stamina to the population."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print("The population is resting...")
        for person in self.population:
            person["health"] += 5  # Example increment
            person["energy"] += 10
        
        self.actions_remaining -= 1

    def perform_travel(self, destination, transportation_multiplier):
        """Moves the group to a new location."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print(f"Traveling from {self.location} to {destination}...")
        travel_cost = 10 * transportation_multiplier

        if self.resources["food"] < travel_cost:
            print("Not enough food to travel!")
            return

        self.resources["food"] -= travel_cost
        self.location = destination
        self.actions_remaining -= 1

    def perform_mission(self, mission_type, participants):
        """Assigns a mission to specific individuals."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print(f"Performing mission: {mission_type} with {len(participants)} participants...")
        if mission_type == "survey":
            new_resources = {"wood": 10, "food": 5}  # Example
            for resource, amount in new_resources.items():
                self.resources[resource] = self.resources.get(resource, 0) + amount
            print(f"Survey mission successful! Found resources: {new_resources}")
        elif mission_type == "gather intelligence":
            print("Gathered intelligence on nearby areas.")

        self.actions_remaining -= 1

    def perform_talk(self, target_person, topic):
        """Engages in conversation with an NPC."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print(f"Talking to {target_person} about {topic}...")
        # Example implementation of conversation logic
        if topic == "trade":
            print(f"Negotiated a trade with {target_person}.")
        elif topic == "alliance":
            print(f"Formed an alliance with {target_person}.")

        self.actions_remaining -= 1

    def perform_create(self, create_type, inputs):
        """Allows the user to create new resources or task groups."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print(f"Creating {create_type} with inputs: {inputs}...")
        if create_type == "task group":
            print("Formed a new task group.")
        elif create_type == "story":
            print("Wrote a new story for the population.")

        self.actions_remaining -= 1

    def perform_train(self, train_type, participants):
        """Improves stats of participants in a specific area."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print(f"Training {len(participants)} participants in {train_type}...")
        for person in participants:
            if train_type == "physical":
                person["strength"] += 1  # Example stat increment
            elif train_type == "mental":
                person["intelligence"] += 1
            elif train_type == "spiritual":
                person["spirituality"] += 1

        self.actions_remaining -= 1

    def reset_actions(self):
        """Resets the action counter for a new turn."""
        self.actions_remaining = 3
        print("Actions have been reset for the new turn.")

# Example usage
game = Game()
game.population = [
    {"name": "Alice", "health": 50, "energy": 30, "strength": 5, "intelligence": 7, "spirituality": 3},
    {"name": "Bob", "health": 60, "energy": 40, "strength": 6, "intelligence": 6, "spirituality": 4}
]

# Simulate a turn
game.perform_rest()
game.perform_travel("forest", 1.2)
game.perform_mission("survey", game.population)
game.reset_actions()
