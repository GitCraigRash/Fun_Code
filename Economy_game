class Game:
    def __init__(self):
        self.population = []  # List of individuals with their stats
        self.resources = {"food": 100, "wood": 50, "paper": 20}
        self.location = "home"
        self.actions_remaining = 3

    def perform_rest(self):
        """Restores minor health or stamina to the population."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print("The population is resting...")
        for person in self.population:
            person["health"] += 5  # Example increment
            person["energy"] += 10
        
        self.actions_remaining -= 1

    def perform_travel(self, destination, transportation_multiplier):
        """Moves the group to a new location."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print(f"Traveling from {self.location} to {destination}...")
        travel_cost = 10 * transportation_multiplier

        if self.resources["food"] < travel_cost:
            print("Not enough food to travel!")
            return

        self.resources["food"] -= travel_cost
        self.location = destination
        self.actions_remaining -= 1

    def perform_mission(self, mission_type, participants):
        """Assigns a mission to specific individuals."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print(f"Performing mission: {mission_type} with {len(participants)} participants...")
        if mission_type == "survey":
            new_resources = {"wood": 10, "food": 5}  # Example
            for resource, amount in new_resources.items():
                self.resources[resource] = self.resources.get(resource, 0) + amount
            print(f"Survey mission successful! Found resources: {new_resources}")
        elif mission_type == "gather intelligence":
            print("Gathered intelligence on nearby areas.")

        self.actions_remaining -= 1

    def perform_talk(self, target_person, topic):
        """Engages in conversation with an NPC."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print(f"Talking to {target_person} about {topic}...")
        # Example implementation of conversation logic
        if topic == "trade":
            print(f"Negotiated a trade with {target_person}.")
        elif topic == "alliance":
            print(f"Formed an alliance with {target_person}.")

        self.actions_remaining -= 1

    def perform_create(self, create_type, inputs):
        """Allows the user to create new resources or task groups."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print(f"Creating {create_type} with inputs: {inputs}...")
        if create_type == "task group":
            print("Formed a new task group.")
        elif create_type == "story":
            print("Wrote a new story for the population.")

        self.actions_remaining -= 1

    def perform_train(self, train_type, participants):
        """Improves stats of participants in a specific area."""
        if self.actions_remaining <= 0:
            print("No actions remaining this turn.")
            return

        print(f"Training {len(participants)} participants in {train_type}...")
        for person in participants:
            if train_type == "physical":
                person["strength"] += 1  # Example stat increment
            elif train_type == "mental":
                person["intelligence"] += 1
            elif train_type == "spiritual":
                person["spirituality"] += 1

        self.actions_remaining -= 1

    def reset_actions(self):
        """Resets the action counter for a new turn."""
        self.actions_remaining = 3
        print("Actions have been reset for the new turn.")

if __name__ == "__main__":
    game = Game()
    game.population = [
        {"name": "Alice", "health": 50, "energy": 30, "strength": 5, "intelligence": 7, "spirituality": 3},
        {"name": "Bob", "health": 60, "energy": 40, "strength": 6, "intelligence": 6, "spirituality": 4}
    ]

    while True:
        print("\nCurrent State:")
        print(f"Resources: {game.resources}")
        print(f"Location: {game.location}")
        print(f"Actions Remaining: {game.actions_remaining}")

        print("\nAvailable Actions:")
        print("1. Rest")
        print("2. Travel")
        print("3. Perform Mission")
        print("4. Talk")
        print("5. Create")
        print("6. Train")
        print("7. End Turn")

        choice = input("Choose an action (1-7): ")

        if choice == "1":
            game.perform_rest()
        elif choice == "2":
            destination = input("Enter destination: ")
            multiplier = float(input("Enter transportation multiplier: "))
            game.perform_travel(destination, multiplier)
        elif choice == "3":
            mission_type = input("Enter mission type (survey/gather intelligence): ")
            game.perform_mission(mission_type, game.population)
        elif choice == "4":
            target = input("Enter target person: ")
            topic = input("Enter topic (trade/alliance): ")
            game.perform_talk(target, topic)
        elif choice == "5":
            create_type = input("Enter create type (task group/story): ")
            inputs = input("Enter inputs: ")
            game.perform_create(create_type, inputs)
        elif choice == "6":
            train_type = input("Enter training type (physical/mental/spiritual): ")
            game.perform_train(train_type, game.population)
        elif choice == "7":
            game.reset_actions()
        else:
            print("Invalid choice. Try again.")
